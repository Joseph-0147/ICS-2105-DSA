#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 40
#define MAX_COURSES 8

// Structure to represent a course
struct Course {
    char course_code[20];
    char course_name[50];
};

// Structure to represent a grade
struct Grade {
    int mark;
    char the_grade;
};

// Structure to represent a student
struct Student {
    char registration_number[20];
    char name[50];
    int age;
    struct Course courses[MAX_COURSES];
    struct Grade grades[MAX_COURSES];
};

// Function to calculate the grade based on the mark
char calculateGrade(int mark) {
    if (mark > 69) return 'A';
    else if (mark > 59) return 'B';
    else if (mark > 49) return 'C';
    else if (mark > 39) return 'D';
    else return 'E';
}

// Function to add a student and initialize their details
void addStudent(struct Student students[], int *totalStudents) {
    if (*totalStudents < MAX_STUDENTS) {
        struct Student newStudent;

        printf("Enter registration number: ");
        scanf("%s", newStudent.registration_number);

        printf("Enter name: ");
        scanf("%s", newStudent.name);

        printf("Enter age: ");
        scanf("%d", &newStudent.age);

        for (int i = 0; i < MAX_COURSES; i++) {
            printf("Enter course %d code: ", i + 1);
            scanf("%s", newStudent.courses[i].course_code);

            printf("Enter course %d name: ", i + 1);
            scanf("%s", newStudent.courses[i].course_name);

            // Initialize grades to -1 to indicate that they haven't been calculated yet
            newStudent.grades[i].mark = -1;
            newStudent.grades[i].the_grade = ' ';
        }

        students[(*totalStudents)++] = newStudent;
        printf("Student added successfully.\n");
    } else {
        printf("Maximum number of students reached.\n");
    }
}

// Function to edit a student's details
void editStudent(struct Student students[], int totalStudents) {
    char regNum[20];
    printf("Enter registration number of the student to edit: ");
    scanf("%s", regNum);

    for (int i = 0; i < totalStudents; i++) {
        if (strcmp(students[i].registration_number, regNum) == 0) {
            printf("Enter new registration number: ");
            scanf("%s", students[i].registration_number);

            printf("Enter new name: ");
            scanf("%s", students[i].name);

            printf("Enter new age: ");
            scanf("%d", &students[i].age);

            printf("Student details updated successfully.\n");
            return;
        }
    }

    printf("Student not found.\n");
}

// Function to add marks and calculate grades for a student
void addMarks(struct Student students[], int totalStudents) {
    char regNum[20];
    printf("Enter registration number of the student: ");
    scanf("%s", regNum);

    for (int i = 0; i < totalStudents; i++) {
        if (strcmp(students[i].registration_number, regNum) == 0) {
            for (int j = 0; j < MAX_COURSES; j++) {
                printf("Enter mark for course %d: ", j + 1);
                scanf("%d", &students[i].grades[j].mark);

                // Calculate grade based on the mark
                students[i].grades[j].the_grade = calculateGrade(students[i].grades[j].mark);
            }

            printf("Marks added and grades calculated successfully.\n");
            return;
        }
    }

    printf("Student not found.\n");
}

// Function to display student details
void displayStudents(struct Student students[], int totalStudents) {
    for (int i = 0; i < totalStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Registration Number: %s\n", students[i].registration_number);
        printf("Name: %s\n", students[i].name);
        printf("Age: %d\n", students[i].age);

        for (int j = 0; j < MAX_COURSES; j++) {
            printf("Course %d:\n", j + 1);
            printf("  Code: %s\n", students[i].courses[j].course_code);
            printf("  Name: %s\n", students[i].courses[j].course_name);
            printf("  Grade: %c\n", students[i].grades[j].the_grade);
        }

        printf("----------------------------------------\n");
    }
}

int main() {
    struct Student students[MAX_STUDENTS];
    int totalStudents = 0;
    int choice;

    do {
        printf("\nMenu:\n");
        printf("1. Add Student\n");
        printf("2. Edit Student Details\n");
        printf("3. Add Marks and Calculate Grades\n");
        printf("4. Display Students\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent(students, &totalStudents);
                break;
            case 2:
                editStudent(students, totalStudents);
                break;
            case 3:
                addMarks(students, totalStudents);
                break;
            case 4:
                displayStudents(students, totalStudents);
                break;
            case 0:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 0);

    return 0;
}
